class Solution {
public:
    vector<vector<string>> res;
    vector<string> ans;
    int n;

    bool isPalind(string s)
    {
        int n = s.size();
        for(int i = 0; i < n /2; ++i){
            if(s[i] != s[n-i-1]){
                return false;
            }
        }
        return true;
    }

    void dfs(string s, int index)
    {
        if(index == n){
            res.push_back(ans);
            return;
        }
        for(int i = index; i < n; ++i){
            if(isPalind(s.substr(index, i - index + 1))){
                ans.push_back(s.substr(index, i - index + 1));
                dfs(s, i + 1);
                ans.pop_back();
            }
        }
    }

    vector<vector<string>> partition(string s) {
        n = s.size();
        if(n == 0){
            return res;
        }
        dfs(s, 0);
        return res;
    }
};
