/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root){
            return nullptr;
        }
        TreeNode* keyr = root;
        TreeNode* prev = nullptr;
        while(keyr){
            if(keyr->val == key){
                break;
            }
            else if(keyr->val > key){
                prev = keyr;
                keyr = keyr->left;
            }
            else if(keyr->val < key){
                prev = keyr;
                keyr = keyr->right;
            }
        }
        if(!root){
            return root;
        }
        else if(!prev){
            return deleteNode(root);
        }
        else if(root->left == keyr){
            root->left = deleteNode(keyr);
        }
        else if(root->right == keyr){
            root->right = deleteNode(keyr)
        }
        return root;
    }

    TreeNode* deleteNode(TreeNode* keyr)
    {
        if(keyr == nullptr){
            return root;
        }
        else if(!keyr->left && !keyr->right){
            return nullptr;
        }
        else if(!keyr->left){
            return keyr->right;
        }
        else if(!keyr->right){
            return keyr->left;
        }
        else {
            TreeNode* parent = keyr;
            TreeNode* f = keyr->right;
            while(f->left){
                parent = f;
                f = f->left;
            }
            swap(node->val, f->val);
            if()
        }
        return keyr;
    }
};
