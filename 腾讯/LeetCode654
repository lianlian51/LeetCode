/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* dfs(vector<int>& nums, int start, int end)
    {
        if(start == end) return new TreeNode(nums[start]);
        if(end < start) return nullptr;
        int maxPos = start;
        for(int i = start; i <= end; ++i){
            if(nums[i] > nums[maxPos]){
                maxPos = i;
            }
        }
        TreeNode* node = new TreeNode(nums[maxPos]);
        node->left = dfs(nums, start, maxPos - 1);
        node->right = dfs(nums, maxPos + 1, end);
        return node;
    }

    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        return dfs(nums, 0, nums.size() - 1);
    }
};
